[{"/Users/charlespeterson/Downloads/toptal-currencies-react/src/index.js":"1","/Users/charlespeterson/Downloads/toptal-currencies-react/src/reportWebVitals.js":"2","/Users/charlespeterson/Downloads/toptal-currencies-react/src/App.js":"3","/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js":"4","/Users/charlespeterson/Downloads/toptal-currencies-react/src/dataService.js":"5"},{"size":500,"mtime":1634582618000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1634582618000,"results":"8","hashOfConfig":"7"},{"size":1963,"mtime":1661980182507,"results":"9","hashOfConfig":"7"},{"size":4254,"mtime":1661974317036,"results":"10","hashOfConfig":"7"},{"size":532,"mtime":1657299780000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"fgf8l4",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/charlespeterson/Downloads/toptal-currencies-react/src/index.js",[],["24","25"],"/Users/charlespeterson/Downloads/toptal-currencies-react/src/reportWebVitals.js",[],"/Users/charlespeterson/Downloads/toptal-currencies-react/src/App.js",["26","27"],"/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js",["28","29","30","31"],"import { useState, useEffect } from 'react';\nimport styles from './CurrencyConverter.module.css';\nimport PropTypes from 'prop-types';\nimport { getCurrencies, getExchangeRates } from './dataService';\n\n// Build a simple currency converter that will allow users to convert between currencies\n\n// You are provided with an incomplete <CurrencyConverter /> component.\n// You are not allowed to add any additional HTML elements (you already have all the elements needed).\n// You are not allowed to use refs.\n\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1P23Fi6oH_piLeCwi5mMNLLHNI_LACZwF/view?usp=sharing\n\n// Once the <CurrencyConverter /> component is mounted, load the currency list and exchange rates using the getCurrencies and getExchangeRates functions imported above.\n// Update the currency list in state, this will render the currencies in the select elements provided\n// Update the exchange rates in state to complete the implementation of the getRate function\n// Implement the following functionality:\n//  - As the user types the amount, the conversion should be done instantly using the rate returned from the getRate function\n//  - The conversion must be possible in both directions - if you select USD and EUR, typing a USD amount should calculate the EUR amount, and typing a EUR amount should calculate the USD amount.\n//  - Changing the currency should trigger a recalculation. The amount entered for the currency that was changed should remain, and the other amount should be recalculated.\n//  - Display the rate used for the conversion in the provided div\n//  - All converted amounts should be displayed to 2 decimal places using the round function provided\n\nconst CurrencyConverter = (props) => {\n  return (\n    <div>\n      <header className={styles.header}>\n        <h1>Currency Converter</h1>\n      </header>\n      <main>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Currency</th>\n\n              <th>Amount</th>\n              <th></th>\n              <th>Currency</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <select\n                  value={props.currency}\n                  onChange={(e) => props.onCurrencyChange(e.target.value)}\n                >\n                  {props.currencies.map((currency, index) => {\n                    return (\n                      <option value={currency} key={index}>\n                        {currency}\n                      </option>\n                    );\n                  })}\n                </select>\n              </td>\n              <td>\n                <input\n                  type='number'\n                  value={props.amount}\n                  onChange={(e) => props.onAmountChange(e.target.value)}\n                />\n              </td>\n              <td className={styles.equalsCell}>=</td>\n              <td>\n                <select\n                  value={props.currency2}\n                  onChange={(e) => props.onCurrencyChange2(e.target.value)}\n                >\n                  {props.currencies.map((currency, index) => {\n                    return (\n                      <option value={currency} key={index}>\n                        {currency}\n                      </option>\n                    );\n                  })}\n                </select>\n              </td>\n              <td>\n                <input\n                  type='number'\n                  value={props.amount2}\n                  onChange={(e) => props.onAmountChange2(e.target.value)}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div className={styles.rate}>Rate:</div>\n      </main>\n    </div>\n  );\n};\n\nCurrencyConverter.propTypes = {\n  amount: PropTypes.number.isRequired,\n  currency: PropTypes.string.isRequired,\n  currencies: PropTypes.array,\n  onAmountChange: PropTypes.func,\n  onCurrencyChange: PropTypes.func,\n  amount2: PropTypes.number.isRequired,\n  currency2: PropTypes.string.isRequired,\n  currencies2: PropTypes.array,\n  onAmountChange2: PropTypes.func,\n  onCurrencyChange2: PropTypes.func,\n};\n\nexport default CurrencyConverter;\n","/Users/charlespeterson/Downloads/toptal-currencies-react/src/dataService.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":4,"column":10,"nodeType":"38","messageId":"39","endLine":4,"endColumn":23},{"ruleId":"36","severity":1,"message":"40","line":4,"column":25,"nodeType":"38","messageId":"39","endLine":4,"endColumn":41},{"ruleId":"36","severity":1,"message":"41","line":1,"column":10,"nodeType":"38","messageId":"39","endLine":1,"endColumn":18},{"ruleId":"36","severity":1,"message":"42","line":1,"column":20,"nodeType":"38","messageId":"39","endLine":1,"endColumn":29},{"ruleId":"36","severity":1,"message":"37","line":4,"column":10,"nodeType":"38","messageId":"39","endLine":4,"endColumn":23},{"ruleId":"36","severity":1,"message":"40","line":4,"column":25,"nodeType":"38","messageId":"39","endLine":4,"endColumn":41},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'getCurrencies' is defined but never used.","Identifier","unusedVar","'getExchangeRates' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]