{"ast":null,"code":"var _jsxFileName = \"/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styles from './CurrencyConverter.module.css';\nimport { getCurrencies, getExchangeRates } from './dataService'; // Build a simple currency converter that will allow users to convert between currencies\n// You are provided with an incomplete <CurrencyConverter /> component.\n// You are not allowed to add any additional HTML elements (you already have all the elements needed).\n// You are not allowed to use refs.\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1P23Fi6oH_piLeCwi5mMNLLHNI_LACZwF/view?usp=sharing\n// Once the <CurrencyConverter /> component is mounted, load the currency list and exchange rates using the getCurrencies and getExchangeRates functions imported above.\n// Update the currency list in state, this will render the currencies in the select elements provided\n// Update the exchange rates in state to complete the implementation of the getRate function\n// Implement the following functionality:\n//  - As the user types the amount, the conversion should be done instantly using the rate returned from the getRate function\n//  - The conversion must be possible in both directions - if you select USD and EUR, typing a USD amount should calculate the EUR amount, and typing a EUR amount should calculate the USD amount.\n//  - Changing the currency should trigger a recalculation. The amount entered for the currency that was changed should remain, and the other amount should be recalculated.\n//  - Display the rate used for the conversion in the provided div\n//  - All converted amounts should be displayed to 2 decimal places using the round function provided\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyConverter = () => {\n  _s();\n\n  const [currencyList, setCurrencyList] = useState([getCurrencies]);\n  const [exchangeRates, setExchangeRates] = useState({\n    getExchangeRates\n  });\n\n  const round = amount => {\n    return Number(amount);\n  };\n\n  const getRate = async (fromCurrency, toCurrency) => {\n    if (fromCurrency === toCurrency) {\n      setCurrencyList.push([getCurrencies]);\n      const currencyData = await getCurrencies();\n      setCurrencyList(currencyData);\n      console.log(await getCurrencies());\n      return 1;\n    }\n\n    const exchangeRate = exchangeRates[`${fromCurrency}${toCurrency}`];\n    setExchangeRates({\n      echange: exchangeRate\n    });\n    console.log(exchangeRate);\n  };\n\n  useEffect(() => {\n    getCurrencies();\n    getExchangeRates();\n    getRate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Currency Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                children: currencyList.map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: currency\n                }, currency, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: styles.equalsCell,\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                children: currencyList.map(currency => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: currency\n                }, currency, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rate,\n        children: \"Rate:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyConverter, \"Mnjc6Exd/Ekmkmot7KoTWyQT5m8=\");\n\n_c = CurrencyConverter;\nexport default CurrencyConverter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js"],"names":["useState","useEffect","styles","getCurrencies","getExchangeRates","CurrencyConverter","currencyList","setCurrencyList","exchangeRates","setExchangeRates","round","amount","Number","getRate","fromCurrency","toCurrency","push","currencyData","console","log","exchangeRate","echange","header","table","map","currency","equalsCell","rate"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport styles from './CurrencyConverter.module.css';\nimport { getCurrencies, getExchangeRates } from './dataService';\n\n// Build a simple currency converter that will allow users to convert between currencies\n\n// You are provided with an incomplete <CurrencyConverter /> component.\n// You are not allowed to add any additional HTML elements (you already have all the elements needed).\n// You are not allowed to use refs.\n\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1P23Fi6oH_piLeCwi5mMNLLHNI_LACZwF/view?usp=sharing\n\n// Once the <CurrencyConverter /> component is mounted, load the currency list and exchange rates using the getCurrencies and getExchangeRates functions imported above.\n// Update the currency list in state, this will render the currencies in the select elements provided\n// Update the exchange rates in state to complete the implementation of the getRate function\n// Implement the following functionality:\n//  - As the user types the amount, the conversion should be done instantly using the rate returned from the getRate function\n//  - The conversion must be possible in both directions - if you select USD and EUR, typing a USD amount should calculate the EUR amount, and typing a EUR amount should calculate the USD amount.\n//  - Changing the currency should trigger a recalculation. The amount entered for the currency that was changed should remain, and the other amount should be recalculated.\n//  - Display the rate used for the conversion in the provided div\n//  - All converted amounts should be displayed to 2 decimal places using the round function provided\n\nconst CurrencyConverter = () => {\n  const [currencyList, setCurrencyList] = useState([getCurrencies]);\n  const [exchangeRates, setExchangeRates] = useState({ getExchangeRates });\n\n  const round = (amount) => {\n    return Number(amount);\n  };\n\n  const getRate = async (fromCurrency, toCurrency) => {\n    if (fromCurrency === toCurrency) {\n      setCurrencyList.push([getCurrencies]);\n      const currencyData = await getCurrencies();\n      setCurrencyList(currencyData);\n      console.log(await getCurrencies());\n      return 1;\n    }\n    const exchangeRate = exchangeRates[`${fromCurrency}${toCurrency}`];\n    setExchangeRates({ echange: exchangeRate });\n    console.log(exchangeRate);\n  };\n\n  useEffect(() => {\n    getCurrencies();\n    getExchangeRates();\n    getRate();\n  }, []);\n\n  return (\n    <div>\n      <header className={styles.header}>\n        <h1>Currency Converter</h1>\n      </header>\n      <main>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Currency</th>\n              <th>Amount</th>\n              <th></th>\n              <th>Currency</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <select>\n                  {currencyList.map((currency) => (\n                    <option key={currency}>{currency}</option>\n                  ))}\n                </select>\n              </td>\n              <td>\n                <input type='number' />\n              </td>\n              <td className={styles.equalsCell}>=</td>\n              <td>\n                <select>\n                  {currencyList.map((currency) => (\n                    <option key={currency}>{currency}</option>\n                  ))}\n                </select>\n              </td>\n              <td>\n                <input type='number' />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div className={styles.rate}>Rate:</div>\n      </main>\n    </div>\n  );\n};\n\nexport default CurrencyConverter;\n"]},"metadata":{},"sourceType":"module"}