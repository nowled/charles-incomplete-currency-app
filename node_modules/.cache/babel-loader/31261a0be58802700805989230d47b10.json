{"ast":null,"code":"var _jsxFileName = \"/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport styles from './CurrencyConverter.module.css';\nimport { getCurrencies, getExchangeRates } from './dataService'; // Build a simple currency converter that will allow users to convert between currencies\n// You are provided with an incomplete <CurrencyConverter /> component.\n// You are not allowed to add any additional HTML elements (you already have all the elements needed).\n// You are not allowed to use refs.\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1P23Fi6oH_piLeCwi5mMNLLHNI_LACZwF/view?usp=sharing\n// Once the <CurrencyConverter /> component is mounted, load the currency list and exchange rates using the getCurrencies and getExchangeRates functions imported above.\n// Update the currency list in state, this will render the currencies in the select elements provided\n// Update the exchange rates in state to complete the implementation of the getRate function\n// Implement the following functionality:\n//  - As the user types the amount, the conversion should be done instantly using the rate returned from the getRate function\n//  - The conversion must be possible in both directions - if you select USD and EUR, typing a USD amount should calculate the EUR amount, and typing a EUR amount should calculate the USD amount.\n//  - Changing the currency should trigger a recalculation. The amount entered for the currency that was changed should remain, and the other amount should be recalculated.\n//  - Display the rate used for the conversion in the provided div\n//  - All converted amounts should be displayed to 2 decimal places using the round function provided\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyConverter = () => {\n  _s();\n\n  const [currencyList, setCurrencyList] = useState([]);\n  const [exchangeRates, setExchangeRates] = useState({}); // const getRate = async (fromCurrency, toCurrency) => {\n  //   if (fromCurrency === toCurrency) {\n  //     const currencyData = await getCurrencies();\n  //     setCurrencyList(currencyData);\n  //     const exchangeRate = exchangeRates[`${fromCurrency}${toCurrency}`];\n  //     setExchangeRates({ echange: exchangeRate });\n  //     console.log(await getCurrencies());\n  //     console.log(currencyList);\n  //     return 1;\n  //   }\n  // };\n\n  const getRate = async () => {\n    const currencyList = await getCurrencies();\n    if (currencyList) setCurrencyList(currencyList);\n    console.log(currencyList);\n  };\n\n  const getExchange = async (fromCurrency, toCurrency) => {\n    const exchangeRates = await getExchangeRates();\n\n    if (exchangeRates) {\n      setExchangeRates(exchangeRates);\n    } else {\n      return {};\n    } // const exchangeRate = exchangeRates[`${fromCurrency} * ${toCurrency}`];\n\n\n    return 1;\n  };\n\n  const onCurrencyChange = event => {\n    setCurrencyList(event.target.value);\n    console.log(event.target.value);\n  };\n\n  useEffect(() => {\n    getExchange();\n    getRate();\n  }, []);\n  console.log(currencyList, exchangeRates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Currency Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"dropdown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"dropdown\",\n                id: \"dropdown\",\n                children: currencyList.map((currency, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: currency\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: styles.equalsCell,\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                children: Object.keys(exchangeRates).map((rates, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: Object.values(rates)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                placeholder: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rate,\n        children: \"Rate:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyConverter, \"cxo1pCzfoBX2Ddd9ISOyONN/viA=\");\n\n_c = CurrencyConverter;\nexport default CurrencyConverter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/charlespeterson/Downloads/toptal-currencies-react/src/CurrencyConverter.js"],"names":["useState","useEffect","styles","getCurrencies","getExchangeRates","CurrencyConverter","currencyList","setCurrencyList","exchangeRates","setExchangeRates","getRate","console","log","getExchange","fromCurrency","toCurrency","onCurrencyChange","event","target","value","header","table","map","currency","index","equalsCell","Object","keys","rates","values","rate"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport styles from './CurrencyConverter.module.css';\nimport { getCurrencies, getExchangeRates } from './dataService';\n\n// Build a simple currency converter that will allow users to convert between currencies\n\n// You are provided with an incomplete <CurrencyConverter /> component.\n// You are not allowed to add any additional HTML elements (you already have all the elements needed).\n// You are not allowed to use refs.\n\n// Demo video - You can view how the completed functionality should look at: https://drive.google.com/file/d/1P23Fi6oH_piLeCwi5mMNLLHNI_LACZwF/view?usp=sharing\n\n// Once the <CurrencyConverter /> component is mounted, load the currency list and exchange rates using the getCurrencies and getExchangeRates functions imported above.\n// Update the currency list in state, this will render the currencies in the select elements provided\n// Update the exchange rates in state to complete the implementation of the getRate function\n// Implement the following functionality:\n//  - As the user types the amount, the conversion should be done instantly using the rate returned from the getRate function\n//  - The conversion must be possible in both directions - if you select USD and EUR, typing a USD amount should calculate the EUR amount, and typing a EUR amount should calculate the USD amount.\n//  - Changing the currency should trigger a recalculation. The amount entered for the currency that was changed should remain, and the other amount should be recalculated.\n//  - Display the rate used for the conversion in the provided div\n//  - All converted amounts should be displayed to 2 decimal places using the round function provided\n\nconst CurrencyConverter = () => {\n  const [currencyList, setCurrencyList] = useState([]);\n  const [exchangeRates, setExchangeRates] = useState({});\n\n  // const getRate = async (fromCurrency, toCurrency) => {\n  //   if (fromCurrency === toCurrency) {\n  //     const currencyData = await getCurrencies();\n  //     setCurrencyList(currencyData);\n\n  //     const exchangeRate = exchangeRates[`${fromCurrency}${toCurrency}`];\n  //     setExchangeRates({ echange: exchangeRate });\n  //     console.log(await getCurrencies());\n  //     console.log(currencyList);\n  //     return 1;\n  //   }\n  // };\n\n  const getRate = async () => {\n    const currencyList = await getCurrencies();\n\n    if (currencyList) setCurrencyList(currencyList);\n    console.log(currencyList);\n  };\n\n  const getExchange = async (fromCurrency, toCurrency) => {\n    const exchangeRates = await getExchangeRates();\n    if (exchangeRates) {\n      setExchangeRates(exchangeRates);\n    } else {\n      return {};\n    }\n    // const exchangeRate = exchangeRates[`${fromCurrency} * ${toCurrency}`];\n    return 1;\n  };\n\n  const onCurrencyChange = (event) => {\n    setCurrencyList(event.target.value);\n    console.log(event.target.value);\n  };\n\n  useEffect(() => {\n    getExchange();\n    getRate();\n  }, []);\n\n  console.log(currencyList, exchangeRates);\n  return (\n    <div>\n      <header className={styles.header}>\n        <h1>Currency Converter</h1>\n      </header>\n      <main>\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Currency</th>\n\n              <th>Amount</th>\n              <th></th>\n              <th>Currency</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <label for='dropdown'></label>\n                <select name='dropdown' id='dropdown'>\n                  {currencyList.map((currency, index) => (\n                    <option key={index}>{currency}</option>\n                  ))}\n                </select>\n              </td>\n              <td>\n                <input type='number' placeholder='0' />\n              </td>\n              <td className={styles.equalsCell}>=</td>\n              <td>\n                <select>\n                  {Object.keys(exchangeRates).map((rates, index) => (\n                    <option key={index}>{Object.values(rates)}</option>\n                  ))}\n                </select>\n              </td>\n              <td>\n                <input type='number' placeholder='0' />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div className={styles.rate}>Rate:</div>\n      </main>\n    </div>\n  );\n};\n\nexport default CurrencyConverter;\n"]},"metadata":{},"sourceType":"module"}